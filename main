import os
import json
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import pytz

# ==========================
# Настройки
# ==========================
TOKEN = os.environ.get("TELEGRAM_ADMIN_BOT_TOKEN")      # Админ бот
SHOP_BOT_TOKEN = os.environ.get("TELEGRAM_SHOP_BOT_TOKEN")  # Магазин бот
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")      # Пароль для админов
TIMEZONE = pytz.timezone("Europe/Moscow")             # Московское время

# ==========================
# Google Sheets
# ==========================
def get_sheet():
    creds_json_str = os.environ.get("GCP_SERVICE_ACCOUNT_CREDENTIALS")
    if not creds_json_str:
        raise ValueError("GCP_SERVICE_ACCOUNT_CREDENTIALS not set")
    creds_json = json.loads(creds_json_str)
    scopes = ["https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(creds_json, scopes=scopes)
    client = gspread.authorize(creds)
    sheet = client.open("Orders").sheet1
    return sheet

def now_msk():
    return datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")

def create_order(client_id, username="Нет юзернейма", status="waiting_req"):
    sheet = get_sheet()
    if get_order_status(client_id):
        return False
    sheet.append_row([str(client_id), username, status, now_msk()])
    return True

def update_order(client_id, new_status=None, new_username=None):
    sheet = get_sheet()
    client_id_str = str(client_id)
    try:
        cell = sheet.find(client_id_str, in_column=1)
        row_index = cell.row
        headers = sheet.row_values(1)
        status_col = headers.index("status") + 1
        username_col = headers.index("username") + 1
        created_at_col = headers.index("created_at") + 1
        if new_status:
            sheet.update_cell(row_index, status_col, new_status)
        if new_username:
            sheet.update_cell(row_index, username_col, new_username)
        sheet.update_cell(row_index, created_at_col, now_msk())
        return True
    except Exception as e:
        print(f"Ошибка обновления заказа {client_id}: {e}")
        return False

def get_order_status(client_id):
    sheet = get_sheet()
    records = sheet.get_all_records()
    client_id_str = str(client_id)
    for row in records:
        if str(row.get("client_id")) == client_id_str:
            return row.get("status")
    return None

def get_order_username(client_id):
    sheet = get_sheet()
    records = sheet.get_all_records()
    client_id_str = str(client_id)
    for row in records:
        if str(row.get("client_id")) == client_id_str:
            return row.get("username")
    return None

# ==========================
# Админы
# ==========================
verified_admins = set()
pending_file = {}

# ==========================
# Команды
# ==========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.from_user.id
    if chat_id in verified_admins:
        await update.message.reply_text(
            "Привет, админ! Команды:\n"
            "/send_req <client_id> <реквизиты>\n"
            "/confirm <client_id>\n"
            "/myid\n"
            "/reset\n"
            "/check_order <client_id>"
        )
    else:
        await update.message.reply_text("Введи пароль для доступа к боту:")

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.from_user.id
    if chat_id not in verified_admins:
        password = update.message.text.strip()
        if password == ADMIN_PASSWORD:
            verified_admins.add(chat_id)
            await update.message.reply_text("Пароль верный! Добро пожаловать, админ!")
        else:
            await update.message.reply_text("Неверный пароль! Попробуй ещё раз.")

async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Твой chat_id: {update.message.from_user.id}")

# ==========================
# Отправка реквизитов клиенту
# ==========================
async def send_req(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.from_user.id
    if chat_id not in verified_admins:
        await update.message.reply_text("Сначала введи пароль!")
        return
    
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("Использование: /send_req <client_id> <реквизиты>")
        return
    
    try:
        client_id = int(args[0])
        requisites = " ".join(args[1:])
        username = update.message.from_user.username or "Нет юзернейма"
        current_status = get_order_status(client_id)
        
        if current_status:
            update_order(client_id, new_status="waiting_payment", new_username=username)
        else:
            create_order(client_id, username=username, status="waiting_payment")
        
        shop_bot = Bot(token=SHOP_BOT_TOKEN)
        await shop_bot.send_message(
            chat_id=client_id,
            text=f"Реквизиты для оплаты:\n{requisites}\n\nПосле оплаты отправьте квитанцию!"
        )
        await update.message.reply_text(f"Реквизиты отправлены клиенту {client_id}.")
    except Exception as e:
        await update.message.reply_text(f"Ошибка отправки реквизитов: {e}")

# ==========================
# Подтверждение отправки товара
# ==========================
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.from_user.id
    if chat_id not in verified_admins:
        await update.message.reply_text("Сначала введи пароль!")
        return
    
    args = context.args
    if not args:
        await update.message.reply_text("Использование: /confirm <client_id>")
        return
    
    client_id = int(args[0])
    status = get_order_status(client_id)
    if status != "waiting_confirm":
        await update.message.reply_text("Нет заказа в статусе ожидания подтверждения!")
        return
    
    pending_file[chat_id] = client_id
    await update.message.reply_text("Теперь отправь файл или фото товара для клиента.")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.from_user.id
    verified_admins.discard(chat_id)
    await update.message.reply_text("Верификация сброшена. Введи пароль заново.")

async def check_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.from_user.id
    if chat_id not in verified_admins:
        await update.message.reply_text("Сначала введи пароль!")
        return
    
    args = context.args
    if not args:
        await update.message.reply_text("Использование: /check_order <client_id>")
        return
    
    client_id = int(args[0])
    status = get_order_status(client_id)
    if status:
        await update.message.reply_text(f"Статус заказа {client_id}: {status}")
    else:
        await update.message.reply_text("Заказ не найден.")

# ==========================
# Обработка файлов и фото товара
# ==========================
async def handle_product_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.from_user.id
    if chat_id not in verified_admins:
        await update.message.reply_text("Сначала введи пароль!")
        return
    
    if chat_id not in pending_file:
        await update.message.reply_text("Сначала выполни /confirm <client_id>.")
        return
    
    client_id = pending_file[chat_id]
    shop_bot = Bot(token=SHOP_BOT_TOKEN)
    
    try:
        if update.message.photo:
            photo = update.message.photo[-1].file_id
            await shop_bot.send_photo(chat_id=client_id, photo=photo, caption="Товар подтвержден! Спасибо!")
        elif update.message.document:
            document = update.message.document.file_id
            await shop_bot.send_document(chat_id=client_id, document=document, caption="Товар подтвержден! Спасибо!")
        else:
            await update.message.reply_text("Отправь файл или фото товара!")
            return
        
        update_order(client_id, new_status="done")
        await update.message.reply_text(f"Товар отправлен клиенту {client_id}.")
        del pending_file[chat_id]
    except Exception as e:
        await update.message.reply_text(f"Ошибка отправки товара: {e}")

# ==========================
# Запуск бота
# ==========================
def main():
    application = Application.builder().token(TOKEN).build()
    
    # Команды
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("myid", myid))
    application.add_handler(CommandHandler("send_req", send_req))
    application.add_handler(CommandHandler("confirm", confirm))
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("check_order", check_order))
    
    # Пароль для админов
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_password))
    
    # Файлы/фото
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_product_file))
    
    print("Админ бот запущен...")
    application.run_polling()

if __name__ == "__main__":
    main()
